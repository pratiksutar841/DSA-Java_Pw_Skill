Q1: Write a program to print the sum of all the elements present on even indices in the given array.
Input 1: arr[] = {3,20,4,6,9}
Output 1: 16
Input 1: arr[] = {4,3,6,7,1}
Output 1: 11
public class Main {
    public static void main(String[] args) {
        int[] arr = {1,2,3,4,5,6,7,8};
   	 int i = 0, sum = 0;
     while (i < arr.length) {
         sum += arr[i];
         i += 2;
     }
     System.out.println(sum);
    }
}
======================================================================================================================================================================
Q2: Write a program to traverse over the elements of the array using for each loop and print all even
elements.
Input 1: arr[] = {34,21,54,65,43}
Output 1: 34 54
Input 1: arr[] = {4,3,6,7,1}
Output 1: 4 6

public class Traverse {
    public static void main(String[] args) {
        int[] arr = { 1, 2, 3, 4, 5, 6, 7, 8 };
        for (int elem : arr) {
            if (elem % 2 == 0)
                System.out.println(elem);

        }
    }
}
======================================================================================================================================================================
Q3: Write a program to calculate the maximum element in the array.
Input 1: arr[] = {34,21,54,65,43}
Output 1: 65
Input 1: arr[] = {4,3,6,7,1}
Output 1: 7
public class CODE12 {
    public static void main(String[] args) {
        int[] arr = { 10, 7, -5, 8, 9, 0, -4 };
        int max = Integer.MIN_VALUE;
        for (int val : arr) {
            max = Math.max(max, val);
        }
        System.out.print("Largest in given array is " + max);

    }
}
======================================================================================================================================================================
Q4: Write a program to find out the second largest element in a given array.
Input 1: arr[] = {34,21,54,65,43}
Output 1: 54
Input 1: arr[] = {4,3,6,7,1}
Output 1: 6

public class CODE13 {
    public static void main(String[] args) {
        int[] arr = { 34, 21, 54, 65, 43 };
        int arr_size = arr.length;
        int i, first, second;
        // There should be at least two elements
        if (arr_size < 2) {
            System.out.printf(" Invalid Input ");
            return;
        }
        int largest = second = Integer.MIN_VALUE;

        // Find the largest element
        for (i = 0; i < arr_size; i++)
            largest = Math.max(largest, arr[i]);

        // Find the second largest element
        for (i = 0; i < arr_size; i++) {
            if (arr[i] != largest)
                second = Math.max(second, arr[i]);
        }
        if (second == Integer.MIN_VALUE)
            System.out.printf("There is no second " +
                    "largest element\n");
        else
            System.out.printf("%d\n", second);
    }

}
=====================================================================================================================================================================
Q5: Given an array. Find the first peak element in the array. A peak element is an element that is greater than
its just left and just right neighbor.
Input 1: arr[] = {1,3,2,6,5}
Output 1: 6
Input 2: arr[] = {1 4,7,3,2,6,5}
Output 1: 7

public static int findPeak(int[] arr) {
    int n = arr.length;
    for (int i = 1; i < n - 1; i++) {
        if (arr[i] > arr[i - 1] && arr[i] > arr[i + 1]) {
            return arr[i];
        }
    }
    return -1; // No peak found
}
======================================================================================================================================================================


Q1: Take m and n input from the user and m * n integer inputs from user and print the following:
number of positive numbers
number of negative numbers
number of odd numbers
number of even numbers
number of 0.
Input 1:

Output :
number of positive numbers = 7
number of negative numbers = 6
number of odd numbers = 7
number of even numbers = 9
number of 0 = 3

import java.io.*;
import java.util.*;
public class Main{ 
  public static void main(String args[]){
    
    int m,n;
    Scanner sc=new Scanner(System.in);
    System.out.print("enter the number of rows=");
    m=sc.nextInt();    
    System.out.print("enter the number of column=");    
    n=sc.nextInt();
    int arr[][]=new int[m][n];
    
    int i,j;    
       
    System.out.println("enter the  matrix element=\n");    
    for(i=0;i<m;i++){    
        for(j=0;j<n;j++){    
            arr[i][j]=sc.nextInt();  
        }    
    }     
    int positive = 0 , negative = 0 , zero = 0 , odd = 0 , even = 0;
        for( i = 0 ; i < m  ; i++){
            for( j = 0 ; j < n  ; j++){
                if(arr[i][j] > 0)positive++;
                if(arr[i][j] < 0)negative++;
                if(arr[i][j] == 0)zero++;
                if((arr[i][j] % 2) == 0)even++;
                if((arr[i][j] % 2) != 0)odd++;
            }
        }
        
        System.out.println("Number of positives = " + positive);
        System.out.println("Number of negatives = " + negative);
        System.out.println("Number of odds = " + odd);
        System.out.println("Number of evens = " + even);
        System.out.println("Number of zeroes = " + zero);
    }     
}
=======================================================================================================================================================================

Q2: write a program to print the elements above the secondary diagonal in a user inputted
square matrix.
Input 1:

Output : 1 2 4

import java.io.*;
import java.util.*;
public class Main{ 
  public static void main(String args[]){
    
    int m,n;
    Scanner sc=new Scanner(System.in);
    System.out.print("enter the number of rows : ");
    m=sc.nextInt();    
    System.out.print("enter the number of column : ");    
    n=sc.nextInt();
    int arr[][]=new int[m][n];
    
    int i,j;    
       
    System.out.println("enter the  matrix element : ");    
    for(i = 0 ; i < m ; i++){    
        for(j = 0 ; j < n ; j++){    
            arr[i][j]=sc.nextInt();  
        }    
    }     
    
    System.out.println("Elements above secondary diagonal are as follows : ");    
    for(i = 0 ; i < m ; i++){    
        for(j = 0 ; j < n ; j++){    
            if(i + j < m - 1)System.out.print(arr[i][j] + "  ");
            }    
        }  
    }     
}
======================================================================================================================================================================
Q3: write a program to print the elements of both the diagonals in a user inputted square matrix
in any order.
Input 1:

Output 1: 1 3 5 7 9
import java.io.*;
import java.util.*;
public class Main{ 
  public static void main(String args[]){
    
    int m,n;
    Scanner sc=new Scanner(System.in);
    System.out.print("enter the number of rows : ");
    m=sc.nextInt();    
    System.out.print("enter the number of column : ");    
    n=sc.nextInt();
    int arr[][]=new int[m][n];
    
    int i,j;    
       
    System.out.println("enter the  matrix element : ");    
    for(i = 0 ; i < m ; i++){    
        for(j = 0 ; j < n ; j++){    
            arr[i][j]=sc.nextInt();  
        }    
    }     
    
    System.out.println("Elements of both the diagonals are as follows : ");    
    for(i = 0 ; i < m ; i++){    
        for(j = 0 ; j < n ; j++){    
            if(i + j  == m - 1)System.out.print(arr[i][j] + "  ");
            else if(i == j)System.out.print(arr[i][j] + "  ");
            }    
        }  
    }     
}
======================================================================================================================================================================
Q4: Write a program to find the largest element of a given 2D array of integers.
Input 1:

[easy]

[medium]

[medium]

[easy]

1
4
7 8 9
5 6
2

Primary
Diagonal

Secondary
Diagonal
3

1
4
7 8 9
5 6
2

Primary
Diagonal

Secondary
Diagonal
3



Output : 9
import java.io.*;
import java.util.*;
public class Test{ 
  public static void main(String args[]){
    
    int m,n;
    Scanner sc=new Scanner(System.in);
    System.out.print("enter the number of rows : ");
    m=sc.nextInt();    
    System.out.print("enter the number of column : ");    
    n=sc.nextInt();
    int arr[][]=new int[m][n];
    
    int i,j;    
       
    System.out.println("enter the  matrix element : ");    
    for(i = 0 ; i < m ; i++){    
        for(j = 0 ; j < n ; j++){    
            arr[i][j]=sc.nextInt();  
        }    
    }     
    
    System.out.println("Elements of both the diagonals are as follows : ");    

    // As we have a square matrix, and we know this special property of Diagnol element, then for one diagonal both indices are same and for other the sum of both = m-1. 
    // So we will optimise our solution by just traversing one time and getitng both the values. To skip middle element twice we will add an check extra i.e. i!= m-1-i
    for(i = 0 ; i < m ; i++){        
        System.out.print(arr[i][i] + "  ");

        if(i != m-1-i)
            System.out.print(arr[i][m-1-i] + "  ");
        }    
    }  
      
}
=========================================================================================================================================================================
Q5: Write a function which accepts a 2D array of integers and its size as arguments and
displays the elements of middle row and the elements of middle column. Printing can
be done in any order.
[Assuming the 2D Array to be a square matrix with odd dimensions i.e. 3x3, 5x5, 7x7 etc...]

Input 1:

Output : 3 5 5 6 37 7 6 4 3
import java.io.*;
import java.util.*;
public class Main{ 
    public static void main(String args[]){
    
        int m,n;
        Scanner sc=new Scanner(System.in);
        System.out.print("enter the number of rows : ");
        m=sc.nextInt();    
        
        int arr[][]=new int[m][m];
        
        int i,j;    
           
        System.out.println("enter the  matrix element : ");    
        for(i = 0 ; i < m ; i++){    
            for(j = 0 ; j < m ; j++){    
                arr[i][j]=sc.nextInt();  
            }    
        }  
        
        System.out.println("The elements  of the middle row and middle column are as follows : ");
        
         for(i = 0 ; i < m ; i++)System.out.print(arr[i][m/2] + "  ");    
         for(j = 0 ; j < m ; j++){
            if(j == m/2)continue;
            System.out.print(arr[m/2][j] + "  ");
        }
    }     
}
=======================================================================================================================================================================
Question 1. Analyze the time complexity of the following Java code and suggest a way to improve it:
int sum = 0;
for(int i = 1; i <= n; i++) {
for(int j = 1; j <= i; j++) {
sum++;
}
}
Solution :
The time complexity of this code is O(n^2) as it uses nested loops, where the outer loop runs n times and the inner
loop runs i times where i varies from 1 to n.
The total number of operations performed can be calculated by summing the total number of operations in each
iteration of the outer loop. The inner loop will run i times on the i-th iteration of the outer loop. So the number of
operations is (1+2+3+...+n) which is n(n+1)/2, which is O(n^2).
One way to improve the time complexity of this code is to use a mathematical formula to find the sum instead of
using nested loops.
======================================================================================================================================================================
Question 2: Find the value of T(2) for the recurrence relation T(n) = 3T(n-1) + 12n, given that T(0) = 5.
Solution : given T(n) = 3T(n-1) + 12n
Substituting the values in the relation:
T(1) = 3T(0) + 12
=> T(1) = 15 + 12 = 27
T(2) = 3T(1) + 12 * 2
=>T(2) = 3 * 27 + 24 = 81 + 24
Hence T(2) = 105.

=======================================================================================================================================================================
Question 3: Given a recurrence relation, solve it using a substitution method.
Relation : T(n) = T(n - 1) + c
Solution: Let the solution be T(n) = O(n), now let’s prove this using the induction method.
For that to happen T(n) <= cn where c is some constant.
T(n) = T(n - 1) + c
T(n - 1) = T(n - 2) + c
T(n - 2) = T(n - 3) + c
|
|
T(2) = T(1) + c
—------------------------ Adding all above equations
T(n) = T(1) + cn
Let us assume T(1) to be a constant value.
T(n) = k + cn
Therefore, T(n) <= cn
Hence we can conclude T(n) = O(n).
======================================================================================================================================================================
Question 4: Given a recurrence relation:
T(n) = 16T(n/4) + n2logn
Find the time complexity of this relation using the master theorem.
Solution: Fromthegivenrecurrencerelationwecanobtainthevalueofdifferentparameterssuchasa,b,p,and
k.
Therelation:T(n)=16T(n/4)+n2logn
Here,a=16
b=4
k=2
p=1
bk=42=16
Herea=bk
Alsop>-1
HenceT(n)=θ(nlogab*logp+1n)
ThereforeT(n)=θ(nlog164*log1+1n)=θ(n1/2log2n)
=====================================================================================================================================================================
Question 5: Solve the following recurrence relation using recursion tree method T(n) = 2T(n/2) + n
Solution :The given recurrence relation shows-
A problem of si%en will get divided into 2  sub problems of si%en/2E
$ Then,eachsub-problemofsi%en/2willbedividedinto2subproblemsofsi%en/4andsoonD
$ Atthebottommostlayer,thesi%eofsub-problemswillreduceto1.
Thisisillustratedthroughfollowingrecursiontree0

Thegivenrecurrencerelationshows/
$ Thecostofdividingaproblemofsi%enintoits2sub-problemsandthencombiningitssolutionisnD
$ Thecostofdividingaproblemofsi%en/2intoits2sub-problemsandthencombiningitssolutionisn/2andso
on.

Thisisillustratedthroughfollowingrecursiontreewhereeachnoderepresentsthecostofthecorrespondingsub-
problem


Step-02:
De]ermiOe coR] of each levelT
< CoR] of levelU0 = N
< CoR] of levelU1 = O/2 + O/2 = N
< CoR] of levelU2 = O/4 + O/4 + O/4 + O/4 = O aO= Ro oO.
Step-03:
De]ermiOe ]o]al Oumber of levelR iO ]he recurRioO ]reeT
< Size of RubUproblem a] levelU0 = O/2\
< Size of RubUproblem a] levelU1 = O/2;
< Size of RubUproblem a] levelU2 = O/22
CoO]iOuiOg iO Rimilar maOOer, we hava
Size of RubUproblem a] levelUi = O/2i
SuppoRe a] levelUx (laR] level), Rize of ]he RubUproblem becomeR 1. TheO O / 2x = 1
2x = n
TakiOg log oO bo]h Ri=eR(wi]h baRe 2), we get
xlog2 = logn
x = log2n
∴
To]al Oumber of levelR iO ]he recurRioO ]ree = log2O + 1 S]epU04:
De]ermiOe Oumber of Oo=eR iO ]he laR] levelT
< LevelU0 haR 20 Oo=eR i.e. 1 Oo=`
< LevelU1 haR 21 Oo=eR i.e. 2 Oo=eQ
< LevelU2 haR 22 Oo=eR i.e. 4 Oo=es
CoO]iOuiOg iO Rimilar maOOer, we have LevelUlog2O haR 2log2O Oo=eR i.e. O Oo=es
Step-05:
De]ermiOe coR] of laR] level
CoR] of laR] level = O x T(1) = θ(O)
Step-06:
A== coR]R of all ]he levelR of ]he recurRioO ]ree aO= Rimplify ]he expreRRioO Ro ob]aiOe= iO ]ermR of aRymp]o]ic
Oo]a]ioOU


= n x log2n + θ (n)
= nlog2n + θ (n)
= θ (nlog2n)
===================================================================================================================================================================
Question 6. T(n) = 2T(n/2) + K, Solve using Recurrence tree method.
Step1. Drawing Recursion Tree

Step2. Calculating height of tree
        As we know that (n/2^k) =1
        n = 2^K
        Taking log both sides
        log(n) = log(2^k)
        log(n) = klog(2)
        k = log(n)/log(2)
        k = log2(n)
        Height of tree is log(n) base 2
Step3. Calculate cost at each level
        Level 0 = K
        Level 1 = K + K = 2K
        Level 2 = K + K + K + K= 4K and so on...
Step 4. Calculate number of nodes at each level
        Level 0 = 2^0 = 1
        Level 1 = 2^1 = 2
        Level 2 = 2^2 = 4 and so on...
Step 5. Calculating final cost:
        The total cost can be written as,
        Total Cost = Cost of all levels except last level + Cost of last level
        Total Cost = Cost for level-0 + Cost for level-1 + Cost for level-2 + .... + Cost for level-log(n) + Cost for last level
        The cost of the last level is calculated separately because it is the base case and no merging is done at the last
        level so, the cost to solve a single problem at this level is some constant value. Let's take it as O(1)

Let's put the values into the formulae,
T(n) = K + 2*K + 4*K + .... + log(n)` times + `O(1) * n
T(n) = K(1 + 2 + 4 + .... + log(n) times)` + `O(n)
T(n) = K(2^0 + 2^1 + 2^2 + ....+ log(n) times + O(n)
In the GP formed above, a = 1 and r = 2, after solving this we get, T(n) = K * (1 / (2 - 1)) + O(n)
T(n) = K + O(n)
T(n) = O(n)
======================================================================================================================================================================

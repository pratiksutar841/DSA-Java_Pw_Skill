Q1. Given an integer array arr and an integer k, return true if it is
possible to divide the vector
into k non-empty subsets with equal
sum.

Input:
Output:
Explanation :
arr = [1,3,2,2] k = 2
true
1 + 3 and 2+2 are two subsets with equal sum.

public class Main {
    public static void main(String[] args) {
        int[] arr = {1, 3, 2, 2};
        int k = 2;
        boolean result = canDivideArray(arr, k);
        System.out.println(result);
    }

    public static boolean canDivideArray(int[] arr, int k) {
        int n = arr.length;
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += arr[i];
        }
        if (sum % k != 0) {
            return false;
        }
        int target = sum / k;
        boolean[] visited = new boolean[n];
        return canPartition(0, arr, visited, k, 0, target);
    }

    public static boolean canPartition(int start, int[] arr, boolean[] visited, int k, int currentSum, int target) {
        if (k == 1) {
            return true;
        }
        if (currentSum == target) {
            return canPartition(0, arr, visited, k - 1, 0, target);
        }
        for (int i = start; i < arr.length; i++) {
            if (!visited[i]) {
                visited[i] = true;
                if (canPartition(i + 1, arr, visited, k, currentSum + arr[i], target)) {
                    return true;
                }
                visited[i] = false;
            }
        }
        return false;
    }
}
==============================================================================================================================================
Q2. Given an integer array arr, print all the possible permutations of

the given array.
: The array will only contain non repeating elements.
arr = [1, 2, 3]
[[1,2,3] , [1,3,2] , [2,1,3] , [2,3,1] , [3,1,2] , [3,2,1]]

public class Main {
    public static void main(String[] args) {
        int[] arr = {1, 2, 3};
        printPermutations(arr);
    }

    public static void printPermutations(int[] arr) {
        int n = arr.length;
        printPermutationsHelper(arr, 0, n - 1);
    }

    public static void printPermutationsHelper(int[] arr, int left, int right) {
        if (left == right) {
            System.out.println(Arrays.toString(arr));
        } else {
            for (int i = left; i <= right; i++) {
                swap(arr, left, i);
                printPermutationsHelper(arr, left + 1, right);
                swap(arr, left, i);
            }
        }
    }

    public static void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}
==============================================================================================================================================
Q3. Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.
import java.util.*;

public class Main {
    public static void main(String[] args) {
        int[] nums = {1, 1, 2};
        List<List<Integer>> permutations = permuteUnique(nums);
        System.out.println(permutations);
    }

    public static List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        Arrays.sort(nums); // Sort the input array to handle duplicates
        boolean[] used = new boolean[nums.length]; // Array to track used elements
        permuteUniqueHelper(nums, used, new ArrayList<>(), result);
        return result;
    }

    public static void permuteUniqueHelper(int[] nums, boolean[] used, List<Integer> permutation, List<List<Integer>> result) {
        if (permutation.size() == nums.length) {
            result.add(new ArrayList<>(permutation)); // Add a new permutation to the result list
        } else {
            for (int i = 0; i < nums.length; i++) {
                // Skip over any used elements or duplicates
                if (used[i] || (i > 0 && nums[i] == nums[i - 1] && !used[i - 1])) {
                    continue;
                }
                used[i] = true; // Mark the current element as used
                permutation.add(nums[i]); // Add the current element to the permutation
                permuteUniqueHelper(nums, used, permutation, result); // Recursive call
                permutation.remove(permutation.size() - 1); // Remove the current element from the permutation
                used[i] = false; // Mark the current element as unused
            }
        }
    }
}
==============================================================================================================================================
Q4. Check if the product of some subset of an array is equal to the target value.
import java.util.*;

public class Main {
    public static void main(String[] args) {
        int[] arr = {2, 3, 2, 5, 4};
        int target = 16;
        boolean isPossible = checkSubsetProduct(arr, target);
        if (isPossible) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }

    public static boolean checkSubsetProduct(int[] arr, int target) {
        return checkSubsetProductHelper(arr, target, 0, 1);
    }

    public static boolean checkSubsetProductHelper(int[] arr, int target, int index, int product) {
        if (product == target) {
            return true;
        } else if (product > target || index == arr.length) {
            return false;
        } else {
            boolean withCurrent = checkSubsetProductHelper(arr, target, index + 1, product * arr[index]);
            boolean withoutCurrent = checkSubsetProductHelper(arr, target, index + 1, product);
            return withCurrent || withoutCurrent;
        }
    }
}
==============================================================================================================================================
Q5. The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.Given an
integer n, return the number of distinct solutions to the n-queens puzzle.
public class Main {
    public static void main(String[] args) {
        int n = 4;
        int numSolutions = solveNQueens(n);
        System.out.println("Number of solutions for n = " + n + ": " + numSolutions);
    }

    public static int solveNQueens(int n) {
        int[] board = new int[n];
        return solveNQueensHelper(board, 0, n, new boolean[n], new boolean[2 * n - 1], new boolean[2 * n - 1], 0);
    }

    public static int solveNQueensHelper(int[] board, int row, int n, boolean[] colUsed, boolean[] diag1Used, boolean[] diag2Used, int numSolutions) {
        if (row == n) {
            numSolutions++;
        } else {
            for (int col = 0; col < n; col++) {
                if (!colUsed[col] && !diag1Used[row - col + n - 1] && !diag2Used[row + col]) {
                    board[row] = col;
                    colUsed[col] = true;
                    diag1Used[row - col + n - 1] = true;
                    diag2Used[row + col] = true;
                    numSolutions = solveNQueensHelper(board, row + 1, n, colUsed, diag1Used, diag2Used, numSolutions);
                    colUsed[col] = false;
                    diag1Used[row - col + n - 1] = false;
                    diag2Used[row + col] = false;
                }
            }
        }
        return numSolutions;
    }
}
